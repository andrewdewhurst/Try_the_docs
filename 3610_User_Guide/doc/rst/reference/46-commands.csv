Cmd_Group,Parameter,R/W,Num_param, Description
AP,GET_VERSION,READ,1,"""CONTROL: get version"""
AP,GET_STATUS,READ,1,"""CONTROL: get status"""
AP,GET_DELAY_SAMPLES,READ,1,"""CONTROL: get configurable delay in samples"""
AP,GET_BLD_MSG,READ,BLD_MSG_LEN,"""CONTROL: get build message"""
AP,GET_BLD_HOST,READ,BLD_HOST_LEN,"""CONTROL: get build host"""
AP,GET_BLD_REPO_HASH,READ,BLD_REPO_HASH_LEN,"""CONTROL: get repo hash"""
AP,GET_BLD_XGIT_VIEW,READ,BLD_XGIT_VIEW_LEN,"""CONTROL: get xgit view"""
AP,GET_BLD_XGIT_HASH,READ,BLD_XGIT_HASH_LEN,"""CONTROL: get xgit hash"""
AP,GET_BLD_MODIFIED,READ,BLD_MODIFIED_LEN,"""CONTROL: get build modified from given view/hash"""
GPIO,GET_I2C,READ,I2C_MAX_CMD_SIZE,"""GPIO: Read from an I2C device connected to the xvf device"""
GPIO,GET_I2C_WITH_REG,READ,I2C_MAX_CMD_SIZE,"""GPIO: Read from the register of an I2C device connected to the xvf device"""
GPIO,GET_I2C_READ_HEADER,READ,3,"""GPIO: Get the address, register address, and count of next I2C read"""
GPIO,SET_I2C,WRITE,I2C_MAX_CMD_SIZE,"""GPIO: Write to an I2C device connected to the xvf device"""
GPIO,SET_I2C_WITH_REG,WRITE,I2C_MAX_CMD_SIZE,"""GPIO: Write to the register of an I2C device connected to the xvf device"""
GPIO,SET_I2C_READ_HEADER,WRITE,3,"""GPIO: Set address, register address, and count of next I2C read"""
GPIO,GET_SPI,READ,SPI_READ_BUF_SIZE,"""GPIO: Gets the contents of the SPI read buffer"""
GPIO,GET_SPI_READ_HEADER,READ,2,"""GPIO: Get the address and count of next SPI read"""
GPIO,SET_SPI_PUSH,WRITE,SPI_MAX_CMD_SIZE,"""GPIO: Push SPI command data onto the execution queue"""
GPIO,SET_SPI_PUSH_AND_EXEC,WRITE,SPI_MAX_CMD_SIZE,"""GPIO: Push SPI command data and execute the command from the stack"""
GPIO,SET_SPI_READ_HEADER,WRITE,2,"""GPIO: Set address and count of next SPI read"""
GPIO,GET_GPI_PORT,READ,1,"""GPIO: Read current state of the selected GPIO port"""
GPIO,GET_GPI_PIN,READ,1,"""GPIO: Read current state of the selected GPIO pin"""
GPIO,GET_GPI_INT_PENDING_PIN,READ,1,"""GPIO: Read whether interrupt was triggered for selected pin"""
GPIO,GET_GPI_INT_PENDING_PORT,READ,1,"""GPIO: Read whether interrupt was triggered for all pins on selected port"""
GPIO,GET_KWD_HID_EVENT_CNT,READ,1,"""GPIO: read number of KWD HID events detected"""
GPIO,SET_KWD_HID_EVENT_CNT,WRITE,1,"""GPIO: write number of KWD HID events detected"""
GPIO,SET_GPO_PORT,WRITE,2,"""GPIO: Write to all pins of a GPIO port"""
GPIO,SET_GPO_PIN,WRITE,3,"""GPIO: Write to a specific GPIO pin"""
GPIO,SET_GPO_PIN_ACTIVE_LEVEL,WRITE,3,"""GPIO: Set the active level for a specific GPO pin. 0: active low, 1: active high"""
GPIO,SET_GPI_PIN_ACTIVE_LEVEL,WRITE,3,"""GPIO: Set the active level for a specific GPI pin. 0: active low, 1: active high"""
GPIO,SET_GPI_INT_CONFIG,WRITE,3,"""GPIO: Sets the interrupt config for a specific pin"""
GPIO,SET_GPI_READ_HEADER,WRITE,2,"""GPIO: Sets the selected port and pin for the next GPIO read"""
GPIO,GET_GPI_READ_HEADER,READ,2,"""GPIO: Gets the currently selected port and pin"""
GPIO,SET_GPO_PWM_DUTY,WRITE,3,"""GPIO: Set the pwm duty for a specific pin. Value given as an integer percentage"""
GPIO,SET_GPO_FLASHING,WRITE,3,"""GPIO: Set the serial flash mask for a specific pin. Each bit in the mask describes the GPO state for 100ms intervals"""
GPIO,GET_KWD_BOOT_STATUS,READ,1,"""GPIO: Gets boot status for keyword detectors"""
GPIO,GET_RUN_STATUS,READ,1,"""GPIO: Gets run status for the device"""
GPIO,GET_IO_MAP_AND_SHIFT,READ,NUM_IO_MAP_OUTPUTS*sizeof(io_map_and_output_shift_t),"""Get IO map and output shift values for the device"""
GPIO,SET_IO_MAP,WRITE,2,"""Set IO map for the device. arg1: dest(output_io_map_t), arg2: source(input_io_map_t)"""
GPIO,SET_FILTER_INDEX,WRITE,1,"""Set filter index. Selects which filter block will be read from/written to arg1: dest(filter_block_map_t)"""
GPIO,SET_FILTER_BYPASS,WRITE,1,"""Set filter bypass state. arg1: 0 - filter enabled, 1 - bypassed"""
GPIO,SET_FILTER_COEFF,WRITE,NUM_FILTER_COEFFS,"""Set biquad coeffs for a selected filter using floating point. arg1..10: 5x2 float coeffs in forward order (a1,a2,b0,b1,b2) where a0 always is 1.0"""
GPIO,SET_FILTER_COEFF_RAW,WRITE,NUM_FILTER_COEFFS,"""Set raw biquad coeffs for a selected filters. arg1..10: 2 sets of coeffs in forward order (b0,b1,b2,-a1,-a2) signed Q28 format"""
GPIO,GET_FILTER_INDEX,READ,1,"""Get filter index. Selects which filter block will be read from/written to"""
GPIO,GET_FILTER_BYPASS,READ,1,"""Get filter bypass state. 0 - filter enabled, 1 - bypassed"""
GPIO,GET_FILTER_COEFF,READ,NUM_FILTER_COEFFS,"""Get biquad coeffs for a selected filter using floating point. arg1..10: 5x2 float coeffs in forward order (a1,a2,b0,b1,b2) where a0 always is 1.0"""
GPIO,GET_FILTER_COEFF_RAW,READ,NUM_FILTER_COEFFS,"""Get raw biquad coeffs for a selected filters. arg1..10: 2 sets of coeffs in forward order (b0,b1,b2,-a1,-a2) signed Q28 format"""
GPIO,SET_OUTPUT_SHIFT,WRITE,2,"""For a selected output(output_io_map_t), set the no. of bits the output samples will be shifted by. Postive shift value indicates left shift, negative indicates right shift"""
GPIO,GET_MAX_UBM_CYCLES,READ,1,"""Get maximum no. of cycles taken by the user buffer management function"""
GPIO,RESET_MAX_UBM_CYCLES,WRITE,1,"""reset the max user buffer management cycles count"""
GPIO,GET_I2S_RATE,READ,1,"""Get I2S rate"""
GPIO,SET_I2S_RATE,WRITE,1,"""Set I2S rate. This command is only run from the flash. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,SET_I2S_START_STATUS,WRITE,1,"""Start I2S. This command is only run from the flash. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,GET_I2S_START_STATUS,READ,1,"""Get I2S start status"""
GPIO,GET_USB_VENDOR_ID,READ,1,"""Get USB Vendor ID"""
GPIO,GET_USB_PRODUCT_ID,READ,1,"""Get USB Product ID"""
GPIO,GET_USB_BCD_DEVICE,READ,1,"""Get USB Device Release Number (bcdDevice)"""
GPIO,GET_USB_VENDOR_STRING,READ,USB_STR_MAX_BYTES,"""Get USB Vendor string"""
GPIO,GET_USB_PRODUCT_STRING,READ,USB_STR_MAX_BYTES,"""Get USB Product string"""
GPIO,GET_HID_MAP,READ,2,"""Get HID map. Returns byte and bit in HID report for event type and index given by SET_HID_MAP_READ_HEADER."""
GPIO,GET_HID_MAP_READ_HEADER,READ,2,"""Get HID map read header. Returns event type, e.g., GPI or keyword, and index."""
GPIO,GET_HID_USAGE,READ,4,"""Get HID usage. Returns usage page number and short item bytes 0..2 for the HID report byte and bit set by SET_HID_USAGE_READ_HEADER."""
GPIO,GET_HID_USAGE_READ_HEADER,READ,3,"""Get HID usage read header. Returns the HID report byte and bit and the usage page given by SET_HID_USAGE_READ_HEADER."""
GPIO,GET_SERIAL_NUMBER,READ,USB_STR_MAX_BYTES,"""Read serial number from USB descriptor (normally initialised from flash)."""
GPIO,GET_HARDWARE_BUILD,READ,1,"""Get the build number from the hardware build section of the flash data partition."""
GPIO,SET_USB_VENDOR_ID,WRITE,1,"""Set USB Vendor ID. This command is only run from the flash. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,SET_USB_PRODUCT_ID,WRITE,1,"""Set USB Product ID. This command is only run from the flash. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,SET_USB_VENDOR_STRING,WRITE,USB_STR_MAX_BYTES,"""Set USB Vendor string. This command is only run from the flash. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,SET_USB_PRODUCT_STRING,WRITE,USB_STR_MAX_BYTES,"""Set USB Product string. This command is only run from the flash. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,SET_USB_BCD_DEVICE,WRITE,1,"""Set USB Device Release Number (bcdDevice)"""
GPIO,SET_HID_MAP,WRITE,2,"""Set HID map for event type and index from SET_HID_MAP_READ_HEADER. arg1: HID report byte. arg2: HID report bit. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,SET_HID_MAP_READ_HEADER,WRITE,2,"""Set HID map read header. arg1: type of event, e.g., GPI or keyword. arg2: index of event."""
GPIO,SET_HID_USAGE,WRITE,3,"""Set HID usage for report byte and bit and with usage page from SET_HID_USAGE_READ_HEADER. arg1..3: short item bytes 0..2. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,SET_HID_USAGE_READ_HEADER,WRITE,3,"""Set HID usage read header. arg1: HID report byte. arg2: HID report bit. arg3: usage page number (see USB HID Usage Tables)."""
GPIO,SET_SERIAL_NUMBER,WRITE,USB_STR_MAX_BYTES,"""Program serial number to flash"""
GPIO,SET_USB_SERIAL_NUMBER,WRITE,1,"""Load serial number from flash and initialise USB device descriptor with it. Will not work after boot since descriptor is populated only once, with USB start."""
GPIO,SET_USB_START_STATUS,WRITE,1,"""Start USB. This command is only run from the flash. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,GET_USB_START_STATUS,READ,1,"""Get USB start status"""
GPIO,GET_USB_TO_DEVICE_RATE,READ,1,"""Get USB to device rate"""
GPIO,GET_DEVICE_TO_USB_RATE,READ,1,"""Get device to USB rate"""
GPIO,GET_USB_TO_DEVICE_BIT_RES,READ,1,"""Get USB to device bit resolution"""
GPIO,GET_DEVICE_TO_USB_BIT_RES,READ,1,"""Get device to USB bit resolution"""
GPIO,SET_USB_TO_DEVICE_RATE,WRITE,1,"""Set USB to device rate"""
GPIO,SET_DEVICE_TO_USB_RATE,WRITE,1,"""Set device to USB rate"""
GPIO,SET_USB_TO_DEVICE_BIT_RES,WRITE,1,"""Set USB to device bit resolution"""
GPIO,SET_DEVICE_TO_USB_BIT_RES,WRITE,1,"""Set device to USB bit resolution"""
GPIO,GET_MCLK_IN_TO_PDM_CLK_DIVIDER,READ,1,"""Get XCore divider from input master clock to 6.144MHz DDR PDM microphone clock"""
GPIO,GET_SYS_CLK_TO_MCLK_OUT_DIVIDER,READ,1,"""Get XCore divider from system clock to output master clock"""
GPIO,SET_MCLK_IN_TO_PDM_CLK_DIVIDER,WRITE,1,"""Set XCore divider from input master clock to 6.144MHz DDR PDM microphone clock (when master clock is slaved). Run only with -l option, generates a json item for the flash data-partition."""
GPIO,SET_SYS_CLK_TO_MCLK_OUT_DIVIDER,WRITE,1,"""Set XCore divider from system clock to output master clock (where master clock output is used). Run only with -l option, generates a json item for the flash data-partition."""
GPIO,GET_MIC_START_STATUS,READ,1,"""Get microphone client start status."""
GPIO,SET_MIC_START_STATUS,WRITE,1,"""Start microphone client (audio frontend).  This command is only run from the flash. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,SET_MONITOR_STATE_USING_GPO_ENABLED,WRITE,1,"""enable monitoring of state on GPO. This command is only run from the flash. Run only with -l option, generates a json item for the flash data-partition."""
GPIO,SET_KWD_INTERRUPT_PIN,WRITE,1,"""set gpi pin index to receive kwd interrupt on"""
GPIO,GET_KWD_INTERRUPT_PIN,READ,1,"""get gpi pin index to receive kwd interrupt on"""
AEC,GET_BYPASS_AEC,READ,1,"""AEC: get bypass"""
AEC,GET_X_ENERGY_DELTA_AEC,READ,1,"""AEC: get X energy delta"""
AEC,GET_X_ENERGY_GAMMA_LOG2_AEC,READ,1,"""AEC: get X energy gamma log2"""
AEC,GET_FORCED_MU_VALUE_AEC,READ,1,"""AEC: get forced mu value"""
AEC,GET_ADAPTATION_CONFIG_AEC,READ,1,"""AEC: get adaptation config"""
AEC,GET_MU_SCALAR_AEC,READ,1,"""AEC: get mu_scalar"""
AEC,GET_MU_LIMITS_AEC,READ,2,"""AEC: get mu_high and mu_low"""
AEC,GET_SIGMA_ALPHAS_AEC,READ,3,"""AEC: get sigma alphas"""
AEC,GET_ERLE_CH0_AEC,READ,2,"""AEC: get channel 0 ERLE"""
AEC,GET_ERLE_CH1_AEC,READ,2,"""AEC: get channel 1 ERLE"""
AEC,GET_FRAME_ADVANCE_AEC,READ,1,"""AEC: get frame advance"""
AEC,GET_Y_CHANNELS_AEC,READ,1,"""AEC: get y channels"""
AEC,GET_X_CHANNELS_AEC,READ,1,"""AEC: get x channels"""
AEC,GET_X_CHANNEL_PHASES_AEC,READ,AEC_MAX_X_CHANNELS,"""AEC: get x channel phases"""
AEC,GET_F_BIN_COUNT_AEC,READ,1,"""AEC: get f bin count"""
AEC,GET_FILTER_COEFFICIENTS_AEC,READ,AEC_COEFFICIENT_CHUNK_SIZE/sizeof(uint32_t),"""AEC: get filter coefficients"""
AEC,GET_COEFF_INDEX_AEC,READ,1,"""AEC: get coefficient index"""
IC,GET_CH1_BEAMFORM_ENABLE,READ,1,"""get if beamforming is enabled on channel1. default:enable"""
AP,GET_DELAY_ESTIMATOR_ENABLED,READ,1,"""CONTROL: enable/disable delay estimation"""
AP,GET_DELAY_ESTIMATE,READ,1,"""CONTROL: get delay estimate"""
AP,GET_DELAY_DIRECTION,READ,1,"""CONTROL: get configurable delay direction: 0: delay references, 1: delay mics"""
AP,GET_MIC_SHIFT_SATURATE,READ,2,"""CONTROL: get the shift value and saturation (1=enable) to be applied to the input mic samples"""
AP,GET_AEC_RESET_TIMEOUT,READ,1,"""stage A: Get timeout between consecutive AEC resets, values are expressed in 15ms frames. If timeout is -1, the AEC reset is disabled"""
AP,GET_ALT_ARCH_ENABLED,READ,1,"""stage A: Get state of xvf3610 alternate architecture setting: 0: normal, 1: alt-arch"""
AP,GET_ADEC_ENABLED,READ,1,"""stage A: get automatic delay estimator controller enabled: 0: off, 1: on"""
AP,GET_ADEC_MODE,READ,1,"""stage A: get automatic delay estimator controller mode: 0: normal AEC mode, 1: delay estimation mode"""
AP,GET_ADEC_TIME_SINCE_RESET,READ,1,"""stage A: get time in milliseconds since last automatic delay change by ADEC"""
AP,GET_AGM,READ,1,"""stage A: get AEC Goodness Metric estimate (0.0 - 1.0"""
AP,GET_ERLE_BAD_BITS,READ,1,"""stage A: get ERLE bad threshold in bits (log2)"""
AP,GET_ERLE_GOOD_BITS,READ,1,"""stage A: get ERLE good threshold in bits (log2)"""
AP,GET_PEAK_PHASE_ENERGY_TREND_GAIN,READ,1,"""stage A: get value which sets AGM sensitivity to peak phase energy slope"""
AP,GET_ERLE_BAD_GAIN,READ,1,"""stage A: set how steeply AGM drops off when ERLE below threshold"""
AP,GET_ADEC_FAR_THRESHOLD,READ,1,"""stage A: get far signal energy threshold above which we update AGM"""
AP,GET_AEC_PEAK_TO_AVERAGE_RATIO,READ,1,"""stage A: get AEC coefficients peak to average ratio"""
AP,GET_PHASE_POWERS,READ,ADEC_READ_PHASE_POWER_CHUNK_SIZE/sizeof(uint32_t)/2,"""stage A: get 5 phase powers (240 samples per phase) used in delay estimation from the index set."""
AP,GET_PHASE_POWER_INDEX,READ,1,"""stage A: get GERLE gain (how strongly it responds either side of mid point)"""
AP,GET_MIN_RX_TIME_STAGE_A,READ,1,"""stage A min rx time per frame"""
AP,GET_MAX_RX_TIME_STAGE_A,READ,1,"""stage A max rx time per frame"""
AP,GET_MIN_CONTROL_TIME_STAGE_A,READ,1,"""stage A min control time per frame"""
AP,GET_MAX_CONTROL_TIME_STAGE_A,READ,1,"""stage A max control time per frame"""
AP,GET_MIN_DSP_TIME_STAGE_A,READ,1,"""stage A min dsp time per frame"""
AP,GET_MAX_DSP_TIME_STAGE_A,READ,1,"""stage A max dsp time per frame"""
AP,GET_MIN_TX_TIME_STAGE_A,READ,1,"""stage A min tx time per frame"""
AP,GET_MAX_TX_TIME_STAGE_A,READ,1,"""stage A max tx time per frame"""
AP,GET_MIN_IDLE_TIME_STAGE_A,READ,1,"""stage A min idle time per frame"""
AP,GET_MAX_IDLE_TIME_STAGE_A,READ,1,"""stage A max idle time per frame"""
AP,GET_ADEC_PEAK_TO_AVERAGE_GOOD_AEC,READ,1,"""stage A: get the peak to average ratio that is considered good when in normal AEC mode"""
AP,SET_ADEC_PEAK_TO_AVERAGE_GOOD_AEC,WRITE,1,"""stage A: set the peak to average ratio that is considered good when in normal AEC mode"""
AP,GET_MIN_RX_TIME_STAGE_B,READ,1,"""stage B min rx time per frame"""
AP,GET_MAX_RX_TIME_STAGE_B,READ,1,"""stage B max rx time per frame"""
AP,GET_MIN_CONTROL_TIME_STAGE_B,READ,1,"""stage B min control time per frame"""
AP,GET_MAX_CONTROL_TIME_STAGE_B,READ,1,"""stage B max control time per frame"""
AP,GET_MIN_DSP_TIME_STAGE_B,READ,1,"""stage B min dsp time per frame"""
AP,GET_MAX_DSP_TIME_STAGE_B,READ,1,"""stage B max dsp time per frame"""
AP,GET_MIN_TX_TIME_STAGE_B,READ,1,"""stage B min tx time per frame"""
AP,GET_MAX_TX_TIME_STAGE_B,READ,1,"""stage B max tx time per frame"""
AP,GET_MIN_IDLE_TIME_STAGE_B,READ,1,"""stage B min idle time per frame"""
AP,GET_MAX_IDLE_TIME_STAGE_B,READ,1,"""stage B max idle time per frame"""
AP,GET_MIN_RX_TIME_STAGE_C,READ,1,"""stage C min rx time per frame"""
AP,GET_MAX_RX_TIME_STAGE_C,READ,1,"""stage C max rx time per frame"""
AP,GET_MIN_CONTROL_TIME_STAGE_C,READ,1,"""stage C min control time per frame"""
AP,GET_MAX_CONTROL_TIME_STAGE_C,READ,1,"""stage C max control time per frame"""
AP,GET_MIN_DSP_TIME_STAGE_C,READ,1,"""stage C min dsp time per frame"""
AP,GET_MAX_DSP_TIME_STAGE_C,READ,1,"""stage C max dsp time per frame"""
AP,GET_MIN_TX_TIME_STAGE_C,READ,1,"""stage C min tx time per frame"""
AP,GET_MAX_TX_TIME_STAGE_C,READ,1,"""stage C max tx time per frame"""
AP,GET_MIN_IDLE_TIME_STAGE_C,READ,1,"""stage C min idle time per frame"""
AP,GET_MAX_IDLE_TIME_STAGE_C,READ,1,"""stage C max idle time per frame"""
AGC,GET_GAIN_CH0_AGC,READ,1,"""get gain for channel 0"""
AGC,GET_GAIN_CH1_AGC,READ,1,"""get gain for channel 1"""
AGC,GET_MAX_GAIN_CH0_AGC,READ,1,"""get max gain for channel 0"""
AGC,GET_MAX_GAIN_CH1_AGC,READ,1,"""get max gain for channel 1"""
AGC,GET_MIN_GAIN_CH0_AGC,READ,1,"""get min gain for channel 0"""
AGC,GET_MIN_GAIN_CH1_AGC,READ,1,"""get min gain for channel 1"""
AGC,GET_UPPER_THRESHOLD_CH0_AGC,READ,1,"""get upper threshold of desired level for channel 0"""
AGC,GET_UPPER_THRESHOLD_CH1_AGC,READ,1,"""get upper threshold of desired level for channel 1"""
AGC,GET_LOWER_THRESHOLD_CH0_AGC,READ,1,"""get lower threshold of desired level for channel 0"""
AGC,GET_LOWER_THRESHOLD_CH1_AGC,READ,1,"""get lower threshold of desired level for channel 1"""
AGC,GET_ADAPT_CH0_AGC,READ,1,"""get AGC adaptation for channel 0"""
AGC,GET_ADAPT_CH1_AGC,READ,1,"""get AGC adaptation for channel 1"""
AGC,GET_ADAPT_ON_VAD_CH0_AGC,READ,1,"""get AGC adaptation using VAD data for channel 0"""
AGC,GET_ADAPT_ON_VAD_CH1_AGC,READ,1,"""get AGC adaptation using VAD data for channel 1"""
AGC,GET_SOFT_CLIPPING_CH0_AGC,READ,1,"""get AGC soft clipping for channel 0"""
AGC,GET_SOFT_CLIPPING_CH1_AGC,READ,1,"""get AGC soft clipping  for channel 1"""
AGC,GET_LC_ENABLED_CH0_AGC,READ,1,"""get loss control enable for channel 0"""
AGC,GET_LC_ENABLED_CH1_AGC,READ,1,"""get loss control enable for channel 1"""
AGC,GET_LC_N_FRAMES_CH1_AGC,READ,2,"""get number of near-end and far-end frames in loss control for channel 1"""
AGC,GET_LC_CORR_THRESHOLD_CH0_AGC,READ,1,"""get loss control correlation threshold for channel 0"""
AGC,GET_LC_CORR_THRESHOLD_CH1_AGC,READ,1,"""get loss control correlation threshold for channel 1"""
AGC,GET_LC_DELTAS_CH0_AGC,READ,3,"""get loss control delta coefficient for channel 0: far-end only, near-end only, both far-end and near-end"""
AGC,GET_LC_DELTAS_CH1_AGC,READ,3,"""get loss control delta coefficient for channel 1: far-end only, near-end only, both far-end and near-end"""
AGC,GET_LC_GAMMAS_CH0_AGC,READ,3,"""get loss control gamma coefficients for channel 0: background power, increment and decrement"""
AGC,GET_LC_GAMMAS_CH1_AGC,READ,3,"""get loss control gamma coefficients for channel 1: background power, increment and decrement"""
AGC,GET_LC_GAINS_CH0_AGC,READ,4,"""get loss control gains for channel 0: max, double-talk, silence and min"""
AGC,GET_LC_GAINS_CH1_AGC,READ,4,"""get loss control gains for channel 1: max, double-talk, silence and min"""
AGC,GET_INCREMENT_GAIN_STEPSIZE_CH0_AGC,READ,1,"""get stepsize with which gain is incremented for AGC ch0"""
AGC,GET_INCREMENT_GAIN_STEPSIZE_CH1_AGC,READ,1,"""get stepsize with which gain is incremented for AGC ch1"""
AGC,GET_DECREMENT_GAIN_STEPSIZE_CH0_AGC,READ,1,"""get stepsize with which gain is decremented for AGC ch0"""
AGC,GET_DECREMENT_GAIN_STEPSIZE_CH1_AGC,READ,1,"""get stepsize with which gain is decremented for AGC ch1"""
IC,GET_BYPASS_IC,READ,1,"""IC: get bypass state"""
IC,GET_X_ENERGY_DELTA_IC,READ,1,"""IC: get X energy delta"""
IC,GET_X_ENERGY_GAMMA_LOG2_IC,READ,1,"""IC: get X energy gamma log2"""
IC,GET_FORCED_MU_VALUE_IC,READ,1,"""IC: get forced mu value"""
IC,GET_ADAPTATION_CONFIG_IC,READ,1,"""IC: get adaptation config"""
IC,GET_SIGMA_ALPHA_IC,READ,1,"""IC: get adaptation config"""
IC,GET_PHASES_IC,READ,1,"""IC: get phases"""
IC,GET_PROC_FRAME_BINS_IC,READ,1,"""IC: get proc frame bins"""
IC,GET_FILTER_COEFFICIENTS_IC,READ,IC_COEFFICIENT_CHUNK_SIZE/sizeof(uint32_t),"""IC: get filter coefficients"""
IC,GET_COEFFICIENT_INDEX_IC,READ,1,"""IC: get coefficient index"""
SUP,GET_BYPASS_SUP,READ,1,"""SUP: get bypass"""
AEC,SET_BYPASS_AEC,WRITE,1,"""AEC: set bypass"""
AEC,SET_X_ENERGY_DELTA_AEC,WRITE,1,"""AEC: set X energy delta"""
AEC,SET_X_ENERGY_GAMMA_LOG2_AEC,WRITE,1,"""AEC: set X energy gamma log2"""
AEC,SET_FORCED_MU_VALUE_AEC,WRITE,1,"""AEC: set forced mu value"""
AEC,SET_ADAPTATION_CONFIG_AEC,WRITE,1,"""AEC: set adaptation config"""
AEC,SET_MU_SCALAR_AEC,WRITE,1,"""AEC: set mu_scalar"""
AEC,SET_MU_LIMITS_AEC,WRITE,2,"""AEC: set mu_high and mu_low"""
AEC,SET_SIGMA_ALPHAS_AEC,WRITE,3,"""AEC: set sigma alphas"""
AEC,RESET_FILTER_AEC,WRITE,1,"""AEC: reset filter"""
AEC,SET_COEFF_INDEX_AEC,WRITE,1,"""AEC: set coefficient index"""
AP,SET_DELAY_DIRECTION,WRITE,1,"""set configurable delay direction: 0: delay references, 1: delay mics """
AP,SET_DELAY_SAMPLES,WRITE,1,"""CONTROL: set configurable delay in samples"""
AP,SET_DELAY_ESTIMATOR_ENABLED,WRITE,1,"""set delay estimator enabled"""
AP,SET_MIC_SHIFT_SATURATE,WRITE,2,"""CONTROL: set the shift value and saturation (1=enable) to be applied to the input mic samples"""
AP,SET_ALT_ARCH_ENABLED,WRITE,1,"""stage A: Set state of xvf3610 alternate architecture setting: 0: normal, 1: alt-arch"""
AP,SET_AEC_RESET_TIMEOUT,WRITE,1,"""stage A: Set timeout between consecutive AEC resets, values are expressed in 15ms frames. If timeout is -1, the AEC reset is disabled"""
AP,SET_ADEC_ENABLED,WRITE,1,"""set delay estimator controller enabled: 0: off, 1: on"""
AP,SET_MANUAL_ADEC_CYCLE_TRIGGER,WRITE,1,"""trigger a delay estimate + delay configure cycle when 1 is written"""
AP,SET_ERLE_BAD_BITS,WRITE,1,"""set ERLE threshold at which AGM is decreased"""
AP,SET_ERLE_GOOD_BITS,WRITE,1,"""set ERLE threshold at which AGM is increased"""
AP,SET_ERLE_BAD_GAIN,WRITE,1,"""set how strongly AGM is updated when ERLE below threshold"""
AP,SET_PEAK_PHASE_ENERGY_TREND_GAIN,WRITE,1,"""set how strongly AGM is updated by the peak phase slope"""
AP,SET_ADEC_FAR_THRESHOLD,WRITE,1,"""set energy threshold of far signal above which AGM is updated"""
AP,SET_PHASE_POWER_INDEX,WRITE,1,"""set index for reading phase powers"""
AP,RESET_TIME_STAGE_A,WRITE,1,"""reset stage A frame time"""
AP,RESET_TIME_STAGE_B,WRITE,1,"""reset stage B frame time"""
AP,RESET_TIME_STAGE_C,WRITE,1,"""reset stage C frame time"""
AGC,SET_GAIN_CH0_AGC,WRITE,1,"""set gain for channel 0"""
AGC,SET_GAIN_CH1_AGC,WRITE,1,"""set gain for channel 1"""
AGC,SET_MAX_GAIN_CH0_AGC,WRITE,1,"""set max gain for channel 0"""
AGC,SET_MAX_GAIN_CH1_AGC,WRITE,1,"""set gain for channel 1"""
AGC,SET_MAX_GAIN_CH1_AGC,WRITE,1,"""set max gain for channel 1"""
AGC,SET_MIN_GAIN_CH0_AGC,WRITE,1,"""set min gain for channel 0"""
AGC,SET_MIN_GAIN_CH1_AGC,WRITE,1,"""set min gain for channel 1"""
AGC,SET_UPPER_THRESHOLD_CH0_AGC,WRITE,1,"""set upper threshold of desired level for channel 0"""
AGC,SET_UPPER_THRESHOLD_CH1_AGC,WRITE,1,"""set upper threshold of desired level for channel 1"""
AGC,SET_LOWER_THRESHOLD_CH0_AGC,WRITE,1,"""set lower threshold of desired level for channel 0"""
AGC,SET_LOWER_THRESHOLD_CH1_AGC,WRITE,1,"""set lower threshold of desired level for channel 1"""
AGC,SET_ADAPT_CH0_AGC,WRITE,1,"""set AGC adaptation for channel 0"""
AGC,SET_ADAPT_CH1_AGC,WRITE,1,"""set AGC adaptation for channel 1"""
AGC,SET_ADAPT_ON_VAD_CH0_AGC,WRITE,1,"""set AGC adaptation using VAD data for channel 0"""
AGC,SET_ADAPT_ON_VAD_CH1_AGC,WRITE,1,"""set AGC adaptation using VAD data for channel 1"""
AGC,SET_SOFT_CLIPPING_CH0_AGC,WRITE,1,"""set AGC soft clipping for channel 0"""
AGC,SET_SOFT_CLIPPING_CH1_AGC,WRITE,1,"""set AGC soft clipping for channel 1"""
AGC,SET_LC_ENABLED_CH0_AGC,WRITE,1,"""enable loss control for channel 0"""
AGC,SET_LC_ENABLED_CH1_AGC,WRITE,1,"""enable loss control for channel 1"""
AGC,SET_LC_N_FRAMES_CH0_AGC,WRITE,2,"""set number of frames in loss control for near-end and far-end activity on channel 0"""
AGC,SET_LC_N_FRAMES_CH1_AGC,WRITE,2,"""set number of frames in loss control for near-end and far-end activity on channel 1"""
AGC,SET_LC_CORR_THRESHOLD_CH0_AGC,WRITE,1,"""set loss control correlation threshold for channel 0"""
AGC,SET_LC_CORR_THRESHOLD_CH1_AGC,WRITE,1,"""set loss control correlation threshold for channel 1"""
AGC,SET_LC_DELTAS_CH0_AGC,WRITE,3,"""set loss control delta coefficients for channel 0: far-end only, near-end only, both far-end and near-end"""
AGC,SET_LC_DELTAS_CH1_AGC,WRITE,3,"""set loss control delta coefficients for channel 1: far-end only, near-end only, both far-end and near-end"""
AGC,SET_LC_GAMMAS_CH0_AGC,WRITE,3,"""set loss control gamma coefficients for channel 0: background power, increment and decrement"""
AGC,SET_LC_GAMMAS_CH1_AGC,WRITE,3,"""set loss control gamma coefficients for channel 1: background power, increment and decrement"""
AGC,SET_LC_GAINS_CH0_AGC,WRITE,4,"""set loss control gains for channel 0: max, double-talk, silence and min"""
AGC,SET_LC_GAINS_CH1_AGC,WRITE,4,"""set loss control gains for channel 1: max, double-talk, silence and min"""
AGC,SET_INCREMENT_GAIN_STEPSIZE_CH0_AGC,WRITE,1,"""set stepsize with which gain is incremented for AGC ch0"""
AGC,SET_INCREMENT_GAIN_STEPSIZE_CH1_AGC,WRITE,1,"""set stepsize with which gain is incremented for AGC ch1"""
AGC,SET_DECREMENT_GAIN_STEPSIZE_CH0_AGC,WRITE,1,"""set stepsize with which gain is decremented for AGC ch0"""
AGC,SET_DECREMENT_GAIN_STEPSIZE_CH1_AGC,WRITE,1,"""set stepsize with which gain is decremented for AGC ch1"""
IC,SET_BYPASS_IC,WRITE,1,"""IC: set bypass"""
IC,SET_X_ENERGY_DELTA_IC,WRITE,1,"""IC: set X energy delta"""
IC,SET_X_ENERGY_GAMMA_LOG2_IC,WRITE,1,"""IC: set X energy gamma log2"""
IC,SET_FORCED_MU_VALUE_IC,WRITE,1,"""IC: set forced mu value"""
IC,SET_ADAPTATION_CONFIG_IC,WRITE,1,"""IC: set adaptation config"""
IC,SET_SIGMA_ALPHA_IC,WRITE,1,"""IC: set adaptation config"""
IC,SET_COEFFICIENT_INDEX_IC,WRITE,1,"""IC: set coefficient index"""
IC,RESET_FILTER_IC,WRITE,1,"""IC: reset filter"""
IC,SET_CH1_BEAMFORM_ENABLE,WRITE,1,"""set if beamforming is enabled on channel1"""
SUP,SET_BYPASS_SUP,WRITE,1,"""SUP: set bypass"""
